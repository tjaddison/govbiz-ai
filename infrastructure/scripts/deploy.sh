#!/bin/bash

# GovBiz.ai Infrastructure Deployment Script
# This script deploys the AWS infrastructure using CDK

set -e

# Configuration
STAGE=${1:-dev}
REGION=${2:-us-east-1}
PROFILE=${3:-default}

echo "🚀 Deploying GovBiz.ai infrastructure..."
echo "Stage: $STAGE"
echo "Region: $REGION"
echo "Profile: $PROFILE"

# Validate inputs
if [ "$STAGE" != "dev" ] && [ "$STAGE" != "staging" ] && [ "$STAGE" != "prod" ]; then
    echo "❌ Invalid stage. Must be dev, staging, or prod"
    exit 1
fi

# Set environment variables
export AWS_PROFILE=$PROFILE
export AWS_DEFAULT_REGION=$REGION
export CDK_DEFAULT_REGION=$REGION
export STAGE=$STAGE

# Check AWS CLI configuration
echo "📋 Checking AWS CLI configuration..."
aws sts get-caller-identity --profile $PROFILE > /dev/null
if [ $? -ne 0 ]; then
    echo "❌ AWS CLI not configured properly"
    exit 1
fi

# Check if CDK is bootstrapped
echo "🔍 Checking CDK bootstrap status..."
aws cloudformation describe-stacks --stack-name CDKToolkit --profile $PROFILE --region $REGION > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "📦 Bootstrapping CDK..."
    npx cdk bootstrap aws://$(aws sts get-caller-identity --query Account --output text --profile $PROFILE)/$REGION --profile $PROFILE
fi

# Install dependencies
echo "📦 Installing dependencies..."
npm install

# Build TypeScript
echo "🔨 Building TypeScript..."
npm run build

# Synthesize CloudFormation template
echo "🏗️  Synthesizing CloudFormation template..."
npx cdk synth --profile $PROFILE

# Deploy infrastructure
echo "🚀 Deploying infrastructure stack..."
npx cdk deploy GovBizAi-$STAGE \
    --require-approval never \
    --profile $PROFILE \
    --region $REGION \
    --tags Project=GovBiz.ai \
    --tags Environment=$STAGE \
    --tags ManagedBy=CDK

# Get stack outputs
echo "📋 Getting stack outputs..."
STACK_OUTPUTS=$(aws cloudformation describe-stacks \
    --stack-name GovBizAi-$STAGE \
    --query 'Stacks[0].Outputs' \
    --output json \
    --profile $PROFILE \
    --region $REGION)

# Save outputs to file
echo "$STACK_OUTPUTS" > outputs-$STAGE.json
echo "💾 Stack outputs saved to outputs-$STAGE.json"

# Extract key outputs
API_URL=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="ApiGatewayUrl") | .OutputValue')
USER_TABLE=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="UserTableName") | .OutputValue')
DOCUMENT_BUCKET=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="DocumentBucketName") | .OutputValue')

echo ""
echo "✅ Deployment completed successfully!"
echo ""
echo "📊 Stack Information:"
echo "  API Gateway URL: $API_URL"
echo "  User Table: $USER_TABLE"
echo "  Document Bucket: $DOCUMENT_BUCKET"
echo ""
echo "🔗 Next Steps:"
echo "  1. Update your frontend environment variables with the API URL"
echo "  2. Configure SAM.gov API key in AWS Systems Manager Parameter Store"
echo "  3. Set up monitoring and alerting"
echo "  4. Configure domain name and SSL certificate (if needed)"
echo ""

# Generate environment file for Next.js
echo "📝 Generating environment configuration..."
cat > ../web/.env.local << EOF
# Generated by deployment script on $(date)
NEXT_PUBLIC_API_URL=$API_URL
NEXT_PUBLIC_STAGE=$STAGE
NEXT_PUBLIC_REGION=$REGION
AWS_REGION=$REGION
USER_TABLE_NAME=$USER_TABLE
DOCUMENT_BUCKET_NAME=$DOCUMENT_BUCKET
EOF

echo "💾 Environment configuration saved to ../web/.env.local"

# Production-specific configurations
if [ "$STAGE" = "prod" ]; then
    echo ""
    echo "🔒 Production Deployment Checklist:"
    echo "  ☐ Configure custom domain name"
    echo "  ☐ Set up SSL certificate"
    echo "  ☐ Configure WAF rules"
    echo "  ☐ Set up monitoring dashboards"
    echo "  ☐ Configure backup policies"
    echo "  ☐ Review security groups and IAM policies"
    echo "  ☐ Set up log aggregation"
    echo "  ☐ Configure alerting thresholds"
    echo "  ☐ Perform security scan"
    echo "  ☐ Update documentation"
fi

echo ""
echo "🎉 GovBiz.ai infrastructure deployment complete!"