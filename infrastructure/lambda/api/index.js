"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_sqs_1 = require("@aws-sdk/client-sqs");
const client_sns_1 = require("@aws-sdk/client-sns");
const client_eventbridge_1 = require("@aws-sdk/client-eventbridge");
// Initialize AWS clients
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoClient);
const s3Client = new client_s3_1.S3Client({});
const sqsClient = new client_sqs_1.SQSClient({});
const snsClient = new client_sns_1.SNSClient({});
const eventBridgeClient = new client_eventbridge_1.EventBridgeClient({});
// Environment variables
const { STAGE, USER_TABLE, CONVERSATION_TABLE, MESSAGE_TABLE, OPPORTUNITY_TABLE, AUDIT_TABLE, DOCUMENT_BUCKET, EVENT_BUS, NOTIFICATION_TOPIC, MESSAGE_QUEUE, } = process.env;
// Utility functions
const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization',
    'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
};
const createResponse = (statusCode, body, headers = {}) => ({
    statusCode,
    headers: { ...corsHeaders, ...headers },
    body: JSON.stringify(body),
});
const createAuditEvent = (userId, action, resource, details, event) => ({
    eventId: `${userId}-${action}-${Date.now()}`,
    userId,
    action,
    resource,
    timestamp: Date.now(),
    details,
    ipAddress: event.requestContext.identity.sourceIp,
    userAgent: event.requestContext.identity.userAgent,
    ttl: Math.floor(Date.now() / 1000) + (90 * 24 * 60 * 60), // 90 days
});
const logAuditEvent = async (auditEvent) => {
    try {
        await docClient.send(new lib_dynamodb_1.PutCommand({
            TableName: AUDIT_TABLE,
            Item: auditEvent,
        }));
        // Also send to EventBridge for real-time processing
        await eventBridgeClient.send(new client_eventbridge_1.PutEventsCommand({
            Entries: [{
                    Source: 'govbiz.audit',
                    DetailType: 'Audit Event',
                    Detail: JSON.stringify(auditEvent),
                    EventBusName: EVENT_BUS,
                }],
        }));
    }
    catch (error) {
        console.error('Failed to log audit event:', error);
    }
};
// Route handlers
const getUserProfile = async (userId) => {
    try {
        const result = await docClient.send(new lib_dynamodb_1.GetCommand({
            TableName: USER_TABLE,
            Key: { userId },
        }));
        return {
            success: true,
            data: result.Item,
            timestamp: Date.now(),
            requestId: `get-user-${Date.now()}`,
        };
    }
    catch (error) {
        console.error('Get user profile error:', error);
        return {
            success: false,
            error: 'Failed to get user profile',
            timestamp: Date.now(),
            requestId: `get-user-error-${Date.now()}`,
        };
    }
};
const updateUserProfile = async (userId, profileData) => {
    try {
        const updateExpression = Object.keys(profileData)
            .map(key => `#${key} = :${key}`)
            .join(', ');
        const expressionAttributeNames = Object.keys(profileData).reduce((acc, key) => {
            acc[`#${key}`] = key;
            return acc;
        }, {});
        const expressionAttributeValues = Object.keys(profileData).reduce((acc, key) => {
            acc[`:${key}`] = profileData[key];
            return acc;
        }, {});
        const result = await docClient.send(new lib_dynamodb_1.UpdateCommand({
            TableName: USER_TABLE,
            Key: { userId },
            UpdateExpression: `SET ${updateExpression}, updatedAt = :updatedAt`,
            ExpressionAttributeNames: expressionAttributeNames,
            ExpressionAttributeValues: {
                ...expressionAttributeValues,
                ':updatedAt': new Date().toISOString(),
            },
            ReturnValues: 'ALL_NEW',
        }));
        return {
            success: true,
            data: result.Attributes,
            timestamp: Date.now(),
            requestId: `update-user-${Date.now()}`,
        };
    }
    catch (error) {
        console.error('Update user profile error:', error);
        return {
            success: false,
            error: 'Failed to update user profile',
            timestamp: Date.now(),
            requestId: `update-user-error-${Date.now()}`,
        };
    }
};
const getConversations = async (userId, limit = 20) => {
    try {
        const result = await docClient.send(new lib_dynamodb_1.QueryCommand({
            TableName: CONVERSATION_TABLE,
            IndexName: 'user-conversations-index',
            KeyConditionExpression: 'userId = :userId',
            ExpressionAttributeValues: {
                ':userId': userId,
            },
            ScanIndexForward: false,
            Limit: limit,
        }));
        return {
            success: true,
            data: {
                conversations: result.Items || [],
                count: result.Count || 0,
            },
            timestamp: Date.now(),
            requestId: `get-conversations-${Date.now()}`,
        };
    }
    catch (error) {
        console.error('Get conversations error:', error);
        return {
            success: false,
            error: 'Failed to get conversations',
            timestamp: Date.now(),
            requestId: `get-conversations-error-${Date.now()}`,
        };
    }
};
const getMessages = async (conversationId, limit = 50) => {
    try {
        const result = await docClient.send(new lib_dynamodb_1.QueryCommand({
            TableName: MESSAGE_TABLE,
            KeyConditionExpression: 'conversationId = :conversationId',
            ExpressionAttributeValues: {
                ':conversationId': conversationId,
            },
            ScanIndexForward: false,
            Limit: limit,
        }));
        return {
            success: true,
            data: {
                messages: result.Items || [],
                count: result.Count || 0,
            },
            timestamp: Date.now(),
            requestId: `get-messages-${Date.now()}`,
        };
    }
    catch (error) {
        console.error('Get messages error:', error);
        return {
            success: false,
            error: 'Failed to get messages',
            timestamp: Date.now(),
            requestId: `get-messages-error-${Date.now()}`,
        };
    }
};
const getOpportunities = async (filters = {}) => {
    try {
        let params = {
            TableName: OPPORTUNITY_TABLE,
            Limit: filters.limit || 20,
        };
        // Apply filters based on GSI
        if (filters.agency) {
            params.IndexName = 'agency-index';
            params.KeyConditionExpression = 'agency = :agency';
            params.ExpressionAttributeValues = { ':agency': filters.agency };
        }
        else if (filters.naicsCode) {
            params.IndexName = 'naics-index';
            params.KeyConditionExpression = 'naicsCode = :naicsCode';
            params.ExpressionAttributeValues = { ':naicsCode': filters.naicsCode };
        }
        else if (filters.status) {
            params.IndexName = 'status-index';
            params.KeyConditionExpression = 'status = :status';
            params.ExpressionAttributeValues = { ':status': filters.status };
        }
        const result = await docClient.send(new lib_dynamodb_1.QueryCommand(params));
        return {
            success: true,
            data: {
                opportunities: result.Items || [],
                count: result.Count || 0,
            },
            timestamp: Date.now(),
            requestId: `get-opportunities-${Date.now()}`,
        };
    }
    catch (error) {
        console.error('Get opportunities error:', error);
        return {
            success: false,
            error: 'Failed to get opportunities',
            timestamp: Date.now(),
            requestId: `get-opportunities-error-${Date.now()}`,
        };
    }
};
const processMessage = async (messageData) => {
    try {
        // Send message to SQS for async processing
        await sqsClient.send(new client_sqs_1.SendMessageCommand({
            QueueUrl: MESSAGE_QUEUE,
            MessageBody: JSON.stringify({
                type: 'chat_message',
                data: messageData,
            }),
        }));
        return {
            success: true,
            data: { messageId: messageData.messageId },
            message: 'Message queued for processing',
            timestamp: Date.now(),
            requestId: `process-message-${Date.now()}`,
        };
    }
    catch (error) {
        console.error('Process message error:', error);
        return {
            success: false,
            error: 'Failed to process message',
            timestamp: Date.now(),
            requestId: `process-message-error-${Date.now()}`,
        };
    }
};
// Main handler
const handler = async (event, context) => {
    var _a;
    console.log('Event:', JSON.stringify(event, null, 2));
    // Handle OPTIONS request for CORS
    if (event.httpMethod === 'OPTIONS') {
        return createResponse(200, {
            success: true,
            message: 'CORS preflight',
            timestamp: Date.now(),
            requestId: context.awsRequestId,
        });
    }
    try {
        const path = event.path;
        const method = event.httpMethod;
        const pathParameters = event.pathParameters || {};
        const queryStringParameters = event.queryStringParameters || {};
        const body = event.body ? JSON.parse(event.body) : {};
        // Extract user ID from headers or path
        const userId = ((_a = event.headers.Authorization) === null || _a === void 0 ? void 0 : _a.replace('Bearer ', '')) || pathParameters.userId;
        if (!userId && !path.includes('health')) {
            return createResponse(401, {
                success: false,
                error: 'Unauthorized',
                timestamp: Date.now(),
                requestId: context.awsRequestId,
            });
        }
        let response;
        // Route handling
        switch (true) {
            case path === '/health' && method === 'GET':
                response = {
                    success: true,
                    data: { status: 'healthy', stage: STAGE },
                    timestamp: Date.now(),
                    requestId: context.awsRequestId,
                };
                break;
            case path === '/user/profile' && method === 'GET':
                response = await getUserProfile(userId);
                if (response.success) {
                    await logAuditEvent(createAuditEvent(userId, 'GET_PROFILE', 'user', {}, event));
                }
                break;
            case path === '/user/profile' && method === 'PUT':
                response = await updateUserProfile(userId, body);
                if (response.success) {
                    await logAuditEvent(createAuditEvent(userId, 'UPDATE_PROFILE', 'user', body, event));
                }
                break;
            case path === '/conversations' && method === 'GET':
                response = await getConversations(userId, parseInt(queryStringParameters.limit || '20'));
                if (response.success) {
                    await logAuditEvent(createAuditEvent(userId, 'GET_CONVERSATIONS', 'conversations', {}, event));
                }
                break;
            case path.startsWith('/conversations/') && path.includes('/messages') && method === 'GET':
                const conversationId = pathParameters.conversationId;
                response = await getMessages(conversationId, parseInt(queryStringParameters.limit || '50'));
                if (response.success) {
                    await logAuditEvent(createAuditEvent(userId, 'GET_MESSAGES', 'messages', { conversationId }, event));
                }
                break;
            case path === '/opportunities' && method === 'GET':
                response = await getOpportunities(queryStringParameters);
                if (response.success) {
                    await logAuditEvent(createAuditEvent(userId, 'GET_OPPORTUNITIES', 'opportunities', queryStringParameters, event));
                }
                break;
            case path === '/messages' && method === 'POST':
                response = await processMessage(body);
                if (response.success) {
                    await logAuditEvent(createAuditEvent(userId, 'SEND_MESSAGE', 'messages', body, event));
                }
                break;
            default:
                response = {
                    success: false,
                    error: 'Not found',
                    timestamp: Date.now(),
                    requestId: context.awsRequestId,
                };
                return createResponse(404, response);
        }
        return createResponse(200, response);
    }
    catch (error) {
        console.error('Handler error:', error);
        return createResponse(500, {
            success: false,
            error: 'Internal server error',
            timestamp: Date.now(),
            requestId: context.awsRequestId,
        });
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,